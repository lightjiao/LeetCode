/**
在一个 8 x 8
的棋盘上，有一个白色车（rook）。也可能有空方块，白色的象（bishop）和黑色的卒（pawn）。它们分别以字符
“R”，“.”，“B” 和 “p” 给出。大写字符表示白棋，小写字符表示黑棋。
车按国际象棋中的规则移动：它选择四个基本方向中的一个（北，东，西和南），然后朝那个方向移动，直到它选择停止、到达棋盘的边缘或移动到同一方格来捕获该方格上颜色相反的卒。另外，车不能与其他友方（白色）象进入同一个方格。
返回车能够在一次移动中捕获到的卒的数量。

示例 1：
输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","R",".",".",".","p"],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
在本例中，车能够捕获所有的卒。

示例 2：
输入：[[".",".",".",".",".",".",".","."],[".","p","p","p","p","p",".","."],[".","p","p","B","p","p",".","."],[".","p","B","R","B","p",".","."],[".","p","p","B","p","p",".","."],[".","p","p","p","p","p",".","."],[".",".",".",".",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：0
解释：
象阻止了车捕获任何卒。

示例 3：
输入：[[".",".",".",".",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".","p",".",".",".","."],["p","p",".","R",".","p","B","."],[".",".",".",".",".",".",".","."],[".",".",".","B",".",".",".","."],[".",".",".","p",".",".",".","."],[".",".",".",".",".",".",".","."]]
输出：3
解释：
车可以捕获位置 b5，d6 和 f5 的卒。
 

提示：
board.length == board[i].length == 8
board[i][j] 可以是 'R'，'.'，'B' 或 'p'
只有一个格子上存在 board[i][j] == 'R'
 */

#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do
                           // this in one cpp file
#include "../ListNode.cpp"
#include "../VV.cpp"
#include "../catch.hpp"

#include "limits.h"
#include <algorithm>
#include <iostream>
#include <numeric>
#include <string>
#include <unordered_map>
#include <unordered_set>
#include <vector>

using namespace std;

class Solution
{
public:
    /**
     * violence
     */
    int numRookCaptures(vector<vector<char>>& board)
    {
        if (board.size() == 0) {
            return 0;
        }

        auto [i, j] = findRoot(board);

        int result = 0;
        // 找到数量
        for (int m = i + 1; m < board.size(); m++) {
            if (board[m][j] == 'B') {
                break;
            }
            if (board[m][j] == 'p') {
                result++;
                break;
            }
        }

        for (int m = i - 1; m >= 0; m--) {
            if (board[m][j] == 'B') {
                break;
            }
            if (board[m][j] == 'p') {
                result++;
                break;
            }
        }

        for (int n = j + 1; n < board[i].size(); n++) {
            if (board[i][n] == 'B') {
                break;
            }
            if (board[i][n] == 'p') {
                result++;
                break;
            }
        }

        for (int n = j - 1; n >= 0; n--) {
            if (board[i][n] == 'B') {
                break;
            }
            if (board[i][n] == 'p') {
                result++;
                break;
            }
        }

        return result;
    }

    pair<int, int> findRoot(vector<vector<char>>& board)
    {
        int i, j;
        for (i = 0; i < board.size(); i++) {
            for (j = 0; j < board[i].size(); j++) {
                if (board[i][j] == 'R') {
                    return pair<int, int>(i, j);
                }
            }
        }

        return pair<int, int>(i, j);
    }
};

TEST_CASE("test")
{
    Solution s;

    vector<vector<char>> board;
    board = {{'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', 'p', '.', '.', '.', '.'},
             {'.', '.', '.', 'R', '.', '.', '.', 'p'},
             {'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', 'p', '.', '.', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'}};
    REQUIRE(s.numRookCaptures(board) == 3);

    board = {{'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
             {'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
             {'.', 'p', 'B', 'R', 'B', 'p', '.', '.'},
             {'.', 'p', 'p', 'B', 'p', 'p', '.', '.'},
             {'.', 'p', 'p', 'p', 'p', 'p', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'}};
    REQUIRE(s.numRookCaptures(board) == 0);

    board = {{'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', 'p', '.', '.', '.', '.'},
             {'.', '.', '.', 'p', '.', '.', '.', '.'},
             {'p', 'p', '.', 'R', '.', 'p', 'B', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'},
             {'.', '.', '.', 'B', '.', '.', '.', '.'},
             {'.', '.', '.', 'p', '.', '.', '.', '.'},
             {'.', '.', '.', '.', '.', '.', '.', '.'}};
    REQUIRE(s.numRookCaptures(board) == 3);
}
